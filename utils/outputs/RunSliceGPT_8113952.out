============================================================================================== 
Warning! Mixing Conda and module environments may lead to corruption of the
user environment. 
We do not recommend users mixing those two environments unless absolutely
necessary. Note that 
SURF does not provide any support for Conda environment.
For more information, please refer to our software policy page:
https://servicedesk.surf.nl/wiki/display/WIKI/Software+policy+Snellius#SoftwarepolicySnellius-UseofAnacondaandMinicondaenvironmentsonSnellius 

Remember that many packages have already been installed on the system and can
be loaded using 
the 'module load <package__name>' command. If you are uncertain if a package is
already available 
on the system, please use 'module avail' or 'module spider' to search for it.
============================================================================================== 
GPU available? True
Running SliceGPT experiment.
PyTorch device: cuda
Number of available cuda devices: 1
Loading haoranxu/ALMA-7B config and model weights from Hugging Face
Using LlamaAdapter for ALMA-7B
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:01<00:02,  1.16s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:02<00:01,  1.15s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:03<00:00,  1.01it/s]Loading checkpoint shards: 100%|██████████| 3/3 [00:03<00:00,  1.03s/it]
Loading model done
Loading dataset: wikitext2
Loading dataset done
Preparing dataloader
Preparing dataloader done
Preparing test dataloader
Preparing test dataloader done
Evaluating perplexity...
Time spent on evaluation: 00:00:32.9564
Original ppl: 6.3454
Replacing layers
Replacing layers done
Fusing layernorm modules
Fusing layernorm modules done
Original model parameters: 6,738,149,376
New embedding dimension: 3992 (sparsity 2.5391 %)
Rotate and slice layers
Rotating and slicing:   0%|          | 0/32 [00:00<?, ?layer/s]Rotating and slicing:   3%|▎         | 1/32 [00:12<06:25, 12.43s/layer]Rotating and slicing:   6%|▋         | 2/32 [00:24<06:12, 12.41s/layer]Rotating and slicing:   9%|▉         | 3/32 [00:37<06:00, 12.41s/layer]Rotating and slicing:  12%|█▎        | 4/32 [00:49<05:47, 12.41s/layer]Rotating and slicing:  16%|█▌        | 5/32 [01:02<05:34, 12.41s/layer]Rotating and slicing:  19%|█▉        | 6/32 [01:14<05:22, 12.41s/layer]Rotating and slicing:  22%|██▏       | 7/32 [01:26<05:10, 12.41s/layer]Rotating and slicing:  25%|██▌       | 8/32 [01:39<04:57, 12.41s/layer]Rotating and slicing:  28%|██▊       | 9/32 [01:51<04:45, 12.40s/layer]Rotating and slicing:  31%|███▏      | 10/32 [02:04<04:32, 12.40s/layer]Rotating and slicing:  34%|███▍      | 11/32 [02:16<04:20, 12.42s/layer]Rotating and slicing:  38%|███▊      | 12/32 [02:29<04:08, 12.44s/layer]Rotating and slicing:  41%|████      | 13/32 [02:41<03:56, 12.47s/layer]Rotating and slicing:  44%|████▍     | 14/32 [02:54<03:44, 12.48s/layer]Rotating and slicing:  47%|████▋     | 15/32 [03:06<03:32, 12.49s/layer]Rotating and slicing:  50%|█████     | 16/32 [03:19<03:20, 12.51s/layer]Rotating and slicing:  53%|█████▎    | 17/32 [03:31<03:07, 12.51s/layer]Rotating and slicing:  56%|█████▋    | 18/32 [03:44<02:55, 12.51s/layer]Rotating and slicing:  59%|█████▉    | 19/32 [03:56<02:42, 12.52s/layer]Rotating and slicing:  62%|██████▎   | 20/32 [04:09<02:30, 12.52s/layer]Rotating and slicing:  66%|██████▌   | 21/32 [04:21<02:17, 12.52s/layer]Rotating and slicing:  69%|██████▉   | 22/32 [04:34<02:05, 12.53s/layer]Rotating and slicing:  72%|███████▏  | 23/32 [04:46<01:52, 12.52s/layer]Rotating and slicing:  75%|███████▌  | 24/32 [04:59<01:40, 12.52s/layer]Rotating and slicing:  78%|███████▊  | 25/32 [05:11<01:27, 12.51s/layer]Rotating and slicing:  81%|████████▏ | 26/32 [05:24<01:15, 12.52s/layer]Rotating and slicing:  84%|████████▍ | 27/32 [05:36<01:02, 12.52s/layer]Rotating and slicing:  88%|████████▊ | 28/32 [05:49<00:50, 12.51s/layer]Rotating and slicing:  91%|█████████ | 29/32 [06:01<00:37, 12.52s/layer]Rotating and slicing:  94%|█████████▍| 30/32 [06:14<00:25, 12.52s/layer]Rotating and slicing:  97%|█████████▋| 31/32 [06:26<00:12, 12.52s/layer]Rotating and slicing: 100%|██████████| 32/32 [06:40<00:00, 12.87s/layer]Rotating and slicing: 100%|██████████| 32/32 [06:40<00:00, 12.52s/layer]
Rotate and slice layers done
Saved sliced model to /home/scur1769/ALMA-Matters/models/
Evaluating perplexity...
Time spent on evaluation: 00:00:36.3138
After rotating and slicing 6.4696
Sliced model parameters: 7,591,859,648 (sliced fraction -0.1267)
++++++++++++++++++++++++++++++++++++++
+++++ TESTING NEWLY SLICED MODEL +++++
++++++++++++++++++++++++++++++++++++++
INFO:root:Loading sliced haoranxu/ALMA-7B model from models with sparsity 0.025
INFO:root:Loading haoranxu/ALMA-7B config from Hugging Face
Using LlamaAdapter for ALMA-7B
Loading checkpoint shards:   0%|          | 0/3 [00:00<?, ?it/s]Loading checkpoint shards:  33%|███▎      | 1/3 [00:01<00:02,  1.11s/it]Loading checkpoint shards:  67%|██████▋   | 2/3 [00:02<00:01,  1.10s/it]Loading checkpoint shards: 100%|██████████| 3/3 [00:02<00:00,  1.05it/s]Loading checkpoint shards: 100%|██████████| 3/3 [00:02<00:00,  1.01it/s]
INFO:root:Loading model done
INFO:root:Replacing layers
INFO:root:Replacing layers done
INFO:root:Fusing layernorm modules
INFO:root:Fusing layernorm modules done
INFO:root:Loading sliced model weights from models
/gpfs/home4/scur1769/ALMA-Matters/compression/pruning/TransformerCompression/src/slicegpt/hf_utils.py:183: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  torch.load(str(pathlib.Path(sliced_model_path) / my_sliced_model_name), map_location="cpu")
++++++++++++++
['Translate this from English to German:\\nEnglish: Oh boy I sure hope this works!\\nGerman:Oh boy, I sure hope this works!\\n']

JOB STATISTICS
==============
Job ID: 8113952
Cluster: snellius
User/Group: scur1769/scur1769
State: COMPLETED (exit code 0)
Nodes: 1
Cores per node: 18
CPU Utilized: 00:36:41
CPU Efficiency: 20.41% of 02:59:42 core-walltime
Job Wall-clock time: 00:09:59
Memory Utilized: 22.60 GB
Memory Efficiency: 18.83% of 120.00 GB
